<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vibrant.InfluxDB.Client</name>
    </assembly>
    <members>
        <member name="T:Vibrant.InfluxDB.Client.Consistency">
            <summary>
            Set the number of nodes that must confirm the write. If the requirement is not met the return value will be partial write if some points in the batch fail, or write failure if all points in the batch fail.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.Consistency.One">
            <summary>
            The data must be written to disk by at least 1 valid node
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.Consistency.Quorum">
            <summary>
            The data must be written to disk by (N/2 + 1) valid nodes (N is the replication factor for the target retention policy)
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.Consistency.All">
            <summary>
            The data must be written to disk by all valid nodes
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.Consistency.Any">
            <summary>
            a write is confirmed if hinted-handoff is successful, even if all target nodes report a write failure In this context, “valid node” means a node that hosts a copy of the shard containing the series being written to. In a clustered system, the replication factor should equal the number of valid nodes.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.DatabasePriviledge">
            <summary>
            Enum representing the database privileges of InfluxDB.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.DatabasePriviledge.None">
            <summary>
            No access to the database.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.DatabasePriviledge.Read">
            <summary>
            Read access to the database.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.DatabasePriviledge.Write">
            <summary>
            Write access to the database.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.DatabasePriviledge.All">
            <summary>
            Full access to the database.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.DateTimeExtensions.ToIso8601(System.DateTime)">
            <summary>
            Gets a string that can be used as part of a query to InfluxDB.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxPingResult.Version">
            <summary>
            Gets the version of InfluxDB.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxQueryOptions">
            <summary>
            InfluxQueryOptions are applied to queries made to InfluxDB.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxQueryOptions.Precision">
            <summary>
            Gets or sets the Precision. Default is nanoseconds.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxQueryOptions.ChunkSize">
            <summary>
            Gets or sets the ChunkSize. Default is null. Which means
            it uses the InfluxDB default of 10000.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxWriteOptions">
            <summary>
            The write options that are being used when write operations are performed against influxDB.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxWriteOptions.Consistency">
            <summary>
            Gets or sets the consistency. Default is All.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxWriteOptions.Precision">
            <summary>
            Gets or sets the precision. Default is nanosecond.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxClient">
            <summary>
            An InfluxClient exposes all HTTP operations on InfluxDB.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Constructs an InfluxClient that uses the specified credentials.
            </summary>
            <param name="endpoint"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.#ctor(System.Uri)">
            <summary>
            Constructs an InfluxClient that does not use any credentials.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxClient.DefaultWriteOptions">
            <summary>
            Gets the default write options.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxClient.DefaultQueryOptions">
            <summary>
            Gets the default query optionns.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ExecuteOperationAsync``1(System.String,System.String)">
            <summary>
            Executes an arbitrary command that returns a table as a result.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="commandOrQuery"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ExecuteOperationAsync``1(System.String)">
            <summary>
            Executes an arbitrary command or query that returns a table as a result.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="commandOrQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ExecuteOperationAsync(System.String,System.String)">
            <summary>
            Executes an arbitrary command that does not return a table.
            </summary>
            <param name="commandOrQuery"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ExecuteOperationAsync(System.String)">
            <summary>
            Executes an arbitrary command that does not return a table.
            </summary>
            <param name="commandOrQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.PingAsync">
            <summary>
            Executes a ping.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.PingAsync(System.Int32)">
            <summary>
            Executes a ping and waits for the leader to respond.
            </summary>
            <param name="secondsToWaitForLeader"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowStatsAsync``1">
            <summary>
            Shows InfluxDB stats.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowDiagnosticsAsync``1">
            <summary>
            Shows InfluxDB diagnostics.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowShards">
            <summary>
            Shows Shards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateAdminUserAsync(System.String,System.String)">
            <summary>
            CREATE a new admin user.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateUserAsync(System.String,System.String)">
            <summary>
            CREATE a new non-admin user.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Vibrant.InfluxDB.Client.InfluxClient.GrantAdminPrivilegesAsync(System.String)" -->
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.GrantPrivilegeAsync(System.String,Vibrant.InfluxDB.Client.DatabasePriviledge,System.String)">
            <summary>
            GRANT READ, WRITE or ALL database privileges to an existing user.
            </summary>
            <param name="privilege"></param>
            <param name="db"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.RevokeAdminPrivilegesAsync(System.String)">
            <summary>
            REVOKE administrative privileges from an admin user
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.RevokePrivilegeAsync(System.String,Vibrant.InfluxDB.Client.DatabasePriviledge,System.String)">
            <summary>
            REVOKE READ, WRITE, or ALL database privileges from an existing user.
            </summary>
            <param name="privilege"></param>
            <param name="db"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.SetPasswordAsync(System.String,System.String)">
            <summary>
            SET a user’s password.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropUserAsync(System.String)">
            <summary>
            DROP a user.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowUsersAsync">
            <summary>
            SHOW all existing users and their admin status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowGrantsAsync(System.String)">
            <summary>
            SHOW a user’s database privileges.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateDatabaseIfNotExistsAsync(System.String)">
            <summary>
            Create a database with CREATE DATABASE IF NOT EXISTS.
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateDatabaseAsync(System.String)">
            <summary>
            Create a database with CREATE DATABASE.
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropDatabaseIfExistsAsync(System.String)">
            <summary>
            Delete a database with DROP DATABASE IF EXUSTS,
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropDatabaseAsync(System.String)">
            <summary>
            Delete a database with DROP DATABASE
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropSeries(System.String,System.String)">
            <summary>
            Delete series with DROP SERIES
            </summary>
            <param name="db"></param>
            <param name="measurementName"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropSeries(System.String,System.String,System.String)">
            <summary>
            Delete series with DROP SERIES
            </summary>
            <param name="db"></param>
            <param name="measurementName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropMeasurementAsync(System.String,System.String)">
            <summary>
            Delete measurements with DROP MEASUREMENT
            </summary>
            <param name="measurementName"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateRetentionPolicyAsync(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Create retention policies with CREATE RETENTION POLICY
            </summary>
            <param name="policyName"></param>
            <param name="db"></param>
            <param name="duration"></param>
            <param name="replicationLevel"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.AlterRetentionPolicyAsync(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Modify retention policies with ALTER RETENTION POLICY
            </summary>
            <param name="policyName"></param>
            <param name="db"></param>
            <param name="duration"></param>
            <param name="replicationLevel"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropRetentionPolicyAsync(System.String,System.String)">
            <summary>
            Delete retention policies with DROP RETENTION POLICY
            </summary>
            <param name="policyName"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowContinuousQueries(System.String)">
            <summary>
            To see the continuous queries you have defined, query SHOW CONTINUOUS QUERIES and InfluxDB will return the name and query for each continuous query in the database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.CreateContinuousQuery(System.String,System.String,System.String)">
            <summary>
            Creates a continuous query.
            </summary>
            <param name="name"></param>
            <param name="db"></param>
            <param name="continuousQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.DropContinuousQuery(System.String,System.String)">
            <summary>
            Drops a continuous query.
            </summary>
            <param name="name"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowDatabasesAsync">
            <summary>
            Get a list of all the databases in your system.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowRetentionPoliciesAsync(System.String)">
            <summary>
            The SHOW RETENTION POLICIES query lists the existing retention policies on a given database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowSeriesAsync``1(System.String)">
            <summary>
            The SHOW SERIES query returns the distinct series in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowSeriesAsync``1(System.String,System.String)">
            <summary>
            The SHOW SERIES query returns the distinct series in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowSeriesAsync``1(System.String,System.String,System.String)">
            <summary>
            The SHOW SERIES query returns the distinct series in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowMeasurementsAsync(System.String)">
            <summary>
            The SHOW MEASUREMENTS query returns the measurements in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowMeasurementsAsync(System.String,System.String)">
            <summary>
            The SHOW MEASUREMENTS query returns the measurements in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="withMeasurement"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowMeasurementsAsync(System.String,System.String,System.String)">
            <summary>
            The SHOW MEASUREMENTS query returns the measurements in your database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="withMeasurement"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowTagKeysAsync(System.String)">
            <summary>
            SHOW TAG KEYS returns the tag keys associated with each measurement.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowTagKeysAsync(System.String,System.String)">
            <summary>
            SHOW TAG KEYS returns the tag keys associated with each measurement.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowTagValuesAsync``1(System.String,System.String)">
            <summary>
            The SHOW TAG VALUES query returns the set of tag values for a specific tag key across all measurements in the database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="tagKey"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowTagValuesAsync``1(System.String,System.String,System.String)">
            <summary>
            The SHOW TAG VALUES query returns the set of tag values for a specific tag key across all measurements in the database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="tagKey"></param>
            <param name="measurementName"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowFieldKeysAsync(System.String)">
            <summary>
            The SHOW FIELD KEYS query returns the field keys across each measurement in the database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ShowFieldKeysAsync(System.String,System.String)">
            <summary>
            The SHOW FIELD KEYS query returns the field keys across each measurement in the database.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.WriteAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the rows with default write options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.WriteAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},Vibrant.InfluxDB.Client.InfluxWriteOptions)">
            <summary>
            Writes the rows with the specified write options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="measurementName"></param>
            <param name="rows"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.WriteAsync``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the rows with default write options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.WriteAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},Vibrant.InfluxDB.Client.InfluxWriteOptions)">
            <summary>
            Writes the rows with the specified write options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="db"></param>
            <param name="rows"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ReadAsync``1(System.String,System.String)">
            <summary>
            Executes the query and returns the result with the default query options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="query"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxClient.ReadAsync``1(System.String,System.String,Vibrant.InfluxDB.Client.InfluxQueryOptions)">
            <summary>
            Executes the query and returns the result with the specified query options.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
            <param name="query"></param>
            <param name="db"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxFieldAttribute">
            <summary>
            Attribute to be placed on properties that are considered fields by InfluxDB.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxFieldAttribute.#ctor(System.String)">
            <summary>
            Constructs an InfluxFieldAttribute with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxResult">
            <summary>
            Result of a query to influxdb that does not return a table.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxResult`1">
            <summary>
            Result of a query to influxdb that returns one or more tables.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxResult`1.Series">
            <summary>
            Gets the series.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxResult`1.FindGroup(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Finds the serie that can be identified by the specified tags.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxResultSet`1">
            <summary>
            Result of multiple queries against influxDB that does not return a table.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxResultSet`1.Results">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxResultSet">
            <summary>
            Result of multiple queries against influxDB that returns a table.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxResultSet.Results">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxSeries`1">
            <summary>
            An InfluxSeries is a single series returned by InfluxDB. A single query may
            return multiple series due to GROUP BY.
            </summary>
            <typeparam name="TInfluxRow"></typeparam>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxSeries`1.Name">
            <summary>
            Gets the name of the measurement or series.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxSeries`1.GroupedTags">
            <summary>
            Gets the tags that this InfluxSeries has been grouped on.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.InfluxSeries`1.Rows">
            <summary>
            Gets the rows of the InfluxSeries.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxTagAttribute">
            <summary>
            Attribute to be placed on properties that are considered tags by InfluxDB.
            </summary>
        </member>
        <member name="M:Vibrant.InfluxDB.Client.InfluxTagAttribute.#ctor(System.String)">
            <summary>
            Constructs an InfluxTagAttribute with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.InfluxTimestampAttribute">
            <summary>
            Attribute placed on the property that should be considered the InfluxDB timestamp.
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.Resources.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.CouldNotParseEnum">
            <summary>
              Looks up a localized string similar to Could not parse an incoming value to an enum for the property {0} on the type {1}. The value was {2}..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.CountNotConvertEnumToString">
            <summary>
              Looks up a localized string similar to Could not convert the incominng value {0} to the enum on the property {1} on the type {2}..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.IndeterminateColumns">
            <summary>
              Looks up a localized string similar to Could not determine which columns in the returned data are tags and which are fields..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.InvalidFieldType">
            <summary>
              Looks up a localized string similar to The property {0} on the type {1} which is used as an InfluxField must be one of the following types: string, double, long, bool, DateTime, Nullable&lt;double&gt;, Nullable&lt;long&gt;, Nullable&lt;bool&gt;, Nullable&lt;DateTime&gt; or a user-defined enum..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.InvalidNameProperty">
            <summary>
              Looks up a localized string similar to The property {0} on the type {1} must specify a non-empty name for either an InfluxField or InfluxTag..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.InvalidTagType">
            <summary>
              Looks up a localized string similar to The property {0} on the type {1} which is used as an InfluxTag must be either a string or a user-defined enum..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.InvalidTimestampType">
            <summary>
              Looks up a localized string similar to The property {0} on the type {1} which is used as the InfluxTimestamp must be either a DateTime or a Nullable&lt;DateTime&gt;..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.MultipleAttributesOnSingleProperty">
            <summary>
              Looks up a localized string similar to The property {0} on the type {1} has multiple InfluxAttributes. This is not allowed. Please specify only InfluxTimestamp, InfluxTag or InfluxField..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.ParsingError">
            <summary>
              Looks up a localized string similar to An error occurred while parsing the error response after an unsuccessful request..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.UnexpectedQueryResult">
            <summary>
              Looks up a localized string similar to No measurements were returned in the query. Likely because the measurement does not exist, no data exists for the queried period or because there was an error in the identifiers used in the query..
            </summary>
        </member>
        <member name="P:Vibrant.InfluxDB.Client.Resources.Errors.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error occurred. Please inspect the inner exception..
            </summary>
        </member>
        <member name="T:Vibrant.InfluxDB.Client.TimestampPrecision">
            <summary>
            Precision of DateTimes that are read or written to InfluxDB.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Nanosecond">
            <summary>
            Nanosecond precision.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Microsecond">
            <summary>
            Microsecond precision.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Millisecond">
            <summary>
            Millisecond precision.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Second">
            <summary>
            Second precision.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Minute">
            <summary>
            Minute precision.
            </summary>
        </member>
        <member name="F:Vibrant.InfluxDB.Client.TimestampPrecision.Hours">
            <summary>
            Hour precision.
            </summary>
        </member>
    </members>
</doc>
